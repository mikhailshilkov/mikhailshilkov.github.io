<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scalability on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/scalability/</link>
    <description>Recent content in Scalability on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Mon, 21 Jan 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/scalability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Serverless at Scale: Serving StackOverflow-like Traffic</title>
      <link>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</guid>
      <description>&lt;p&gt;Serverless compute is a very productive and quick way to get an application up and running. A developer writes a piece of code that solves a particular task and uploads it to the cloud. The provider handles code deployment and the ops burden of managing all the required infrastructure, so that the Function is always available, secure and performant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From 0 to 1000 Instances: How Serverless Providers Scale Queue Processing</title>
      <link>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</guid>
      <description>&lt;p&gt;Whenever I see a &amp;ldquo;Getting Started with Function-as-a-Service&amp;rdquo; tutorial, it usually shows off&#xA;a synchronous HTTP-triggered scenario. In my projects, though, I use a lot of asynchronous&#xA;functions triggered by a queue or an event stream.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Load Testing Azure SQL Database by Copying Traffic from Production SQL Server</title>
      <link>https://mikhail.io/2018/02/load-testing-azure-sql-database-by-copying-traffic-from-production-sql-server/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/02/load-testing-azure-sql-database-by-copying-traffic-from-production-sql-server/</guid>
      <description>&lt;p&gt;Azure SQL Database is a managed service that provides low-maintenance SQL Server instances in the cloud.&#xA;You don&amp;rsquo;t have to run and update VMs, or even take backups and setup failover clusters.&#xA;Microsoft will do administration for you, you just pay an hourly fee.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions Get More Scalable and Elastic</title>
      <link>https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/</guid>
      <description>&lt;p&gt;Back in August this year, I&amp;rsquo;ve posted&#xA;&lt;a href=&#34;https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/&#34;&gt;Azure Functions: Are They Really Infinitely Scalable and Elastic?&lt;/a&gt;&#xA;with two experiments about Azure Function App auto scaling. I ran a simple&#xA;CPU-bound function based on Bcrypt hashing, and measured how well Azure&#xA;was running my Function under load.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Are They Really Infinitely Scalable and Elastic?</title>
      <link>https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/</guid>
      <description>&lt;p&gt;&lt;em&gt;Updated results are available at&#xA;&lt;a href=&#34;https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/&#34;&gt;Azure Functions Get More Scalable and Elastic&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Automatic elastic scaling is a built-in feature of Serverless computing&#xA;paradigm. One doesn&amp;rsquo;t have to provision servers anymore, they just need to&#xA;write code that will be provisioned on as many servers as needed based on the&#xA;actual load. That&amp;rsquo;s the theory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Autoscaling with Durable Functions</title>
      <link>https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/</guid>
      <description>&lt;p&gt;In my previous post&#xA;&lt;a href=&#34;https://mikhail.io/2017/07/custom-auto-scaling-in-azure/&#34;&gt;Custom Autoscaling of Azure App Service with a Function App&lt;/a&gt;&#xA;I&amp;rsquo;ve created a Function App which watches a Service Bus Subscription&#xA;backlog and adjusts the scale of App Service based on the observed load.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Autoscaling of Azure App Service with a Function App</title>
      <link>https://mikhail.io/2017/07/custom-auto-scaling-in-azure/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/custom-auto-scaling-in-azure/</guid>
      <description>&lt;p&gt;The power of cloud computing comes from its elasticity and ability to adapt to changing&#xA;load. Most Azure services can be scaled up or down manually: by human interaction in the&#xA;portal, or by running a command or a script.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
