<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/csharp/</link>
    <description>Recent content in C# on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Tue, 05 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Lambda: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/aws/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/aws/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in AWS Lambda, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in Azure Functions, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Drain a List of .NET Tasks to Completion</title>
      <link>https://mikhail.io/2020/09/how-to-drain-dotnet-tasks-to-completion/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/09/how-to-drain-dotnet-tasks-to-completion/</guid>
      <description>&lt;p&gt;The Pulumi .NET SDK operates with an unusual asynchronicity model. Resource declarations are synchronous calls and complete instantaneously.&lt;/p&gt;&#xA;&lt;p&gt;Yet, they kick off the actual operations of resource creation as background tasks. An end-user does not see these tasks and does not await them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Testing Cloud Deployments with Pulumi in C#</title>
      <link>https://mikhail.io/2020/05/unit-testing-cloud-deployments-with-pulumi-in-csharp/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/05/unit-testing-cloud-deployments-with-pulumi-in-csharp/</guid>
      <description>&lt;p&gt;Because Pulumi uses general-purpose programming languages to provision cloud resources, you can take advantage of native tools and perform automated tests of your infrastructure. The full power of each language is available, including access to libraries and frameworks for testing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monads explained in C# (again)</title>
      <link>https://mikhail.io/2018/07/monads-explained-in-csharp-again/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/07/monads-explained-in-csharp-again/</guid>
      <description>&lt;p&gt;I love functional programming for the simplicity that it brings.&lt;/p&gt;&#xA;&lt;p&gt;But at the same time, I realize that learning functional programming is a challenging&#xA;process. FP comes with a baggage of unfamiliar vocabulary that can be daunting for&#xA;somebody coming from an object-oriented language like C#.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing null parameter checks</title>
      <link>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</guid>
      <description>&lt;p&gt;We use constructor dependency injection throughout our application. This means that most service classes have constructors, which accept all dependencies in form of interfaces. They are then saved to private fields to be used while class methods are executed. Here is an example (all examples below are in C#):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sgen to precompile classes for XmlSerializer</title>
      <link>https://mikhail.io/2014/05/21/sgen-to-precompile-classes-for-xmpserializer/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2014/05/21/sgen-to-precompile-classes-for-xmpserializer/</guid>
      <description>&lt;p&gt;During my investigation of our ASP.NET application performance issue, I&amp;rsquo;ve found out that XmlSerializer may require a long warm-up. The first time, when it&amp;rsquo;s used for a specific class (de-)serialization, can take up to 500 ms om my machine! We use XmlSerializer to encode/decode user preferences. Having 40 different classes being deserialized at user login lead to a massive delay of 14 seconds. This is only for the first user login after the application start-up, but you do quite a lot of &amp;lsquo;first times&amp;rsquo; every day while developing the application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multi-level telerik&#39;s TileView</title>
      <link>https://mikhail.io/2012/03/13/multi-level-teleriks-tileview/</link>
      <pubDate>Tue, 13 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2012/03/13/multi-level-teleriks-tileview/</guid>
      <description>&lt;p&gt;We were investigating the options for visual representation of hierarchical dashboard in our Silverlight application. This means, we want to display the number of gauges with tree-like structure. Here is a sample:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hunting memory leaks in Silverlight</title>
      <link>https://mikhail.io/2012/02/05/hunting-memory-leaks-in-silverlight/</link>
      <pubDate>Sun, 05 Feb 2012 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2012/02/05/hunting-memory-leaks-in-silverlight/</guid>
      <description>&lt;p&gt;Recently, I&amp;rsquo;ve spent a couple of days seeking and fixing memory leaks in our Silverlight application. It might be tough sometimes, but it&amp;rsquo;s a good &amp;lsquo;brain-teasing&amp;rsquo; practice and it&amp;rsquo;s a good way to learn how inner things work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Speech bubble custom border control in Silverlight</title>
      <link>https://mikhail.io/2012/01/26/speech-bubble-control-in-sl/</link>
      <pubDate>Thu, 26 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2012/01/26/speech-bubble-control-in-sl/</guid>
      <description>&lt;p&gt;Recently, I was trying to find a Silverlight control, which works like a standard Border, but looks like a Speech Bubble instead. This means the border would have a &amp;ldquo;leader&amp;rdquo; triangle, which could point to a related visual element. See the following example:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
