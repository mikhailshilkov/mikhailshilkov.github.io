<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Thu, 05 Jul 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monads explained in C# (again)</title>
      <link>https://mikhail.io/2018/07/monads-explained-in-csharp-again/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/07/monads-explained-in-csharp-again/</guid>
      <description>&lt;p&gt;I love functional programming for the simplicity that it brings.&lt;/p&gt;&#xA;&lt;p&gt;But at the same time, I realize that learning functional programming is a challenging&#xA;process. FP comes with a baggage of unfamiliar vocabulary that can be daunting for&#xA;somebody coming from an object-oriented language like C#.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why F# and Functional Programming Talk at .NET Development Nederland Meetup</title>
      <link>https://mikhail.io/2017/05/why-fsharp-and-functional-programming-will-make-you-a-better-developer-talk/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/05/why-fsharp-and-functional-programming-will-make-you-a-better-developer-talk/</guid>
      <description>&lt;p&gt;On May 8th 2017 I gave a talk at the&#xA;&lt;a href=&#34;https://www.meetup.com/dotNET-Development-Nederland/&#34;&gt;.NET Development Nederland&lt;/a&gt;&#xA;group in Amsterdam.&lt;/p&gt;&#xA;&lt;p&gt;Here are the slides for the people who were there and want to revisit&#xA;the covered topics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Functional Programming &amp; F# Talks at Webscale Architecture Meetup</title>
      <link>https://mikhail.io/2017/01/functional-programming-fsharp-talks/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/01/functional-programming-fsharp-talks/</guid>
      <description>&lt;p&gt;On January 10th of 2017 I gave two talks at the&#xA;&lt;a href=&#34;https://www.meetup.com/Webscale-Architecture-NL/events/235727572/&#34;&gt;Webscale Architecture NL meetup&lt;/a&gt; group in Utrecht.&lt;/p&gt;&#xA;&lt;p&gt;Here are the slides for the people who were there and want to revisit&#xA;the covered topics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing Scala to F#</title>
      <link>https://mikhail.io/2016/08/comparing-scala-to-fsharp/</link>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/08/comparing-scala-to-fsharp/</guid>
      <description>&lt;p&gt;F# and Scala are quite similar languages from 10.000 feet view. Both are&#xA;functional-first languages developed for the virtual machines where imperative&#xA;languages dominate. C# for .NET and Java for JVM are still &lt;em&gt;lingua franca&lt;/em&gt;,&#xA;but alternatives are getting stronger.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Poker Bot: Functional Fold as Decision Tree Pattern</title>
      <link>https://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the fifth part of &lt;strong&gt;Building a Poker Bot&lt;/strong&gt; series where I describe my experience developing bot software&#xA;to play in online poker rooms. I&amp;rsquo;m building the bot with .NET framework and F# language which makes the task relatively&#xA;easy and very enjoyable. Here are the previous parts:&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tweaking immutable objects with C# and Fody</title>
      <link>https://mikhail.io/2016/05/tweaking-immutable-objects-with-csharp-and-fody/</link>
      <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/05/tweaking-immutable-objects-with-csharp-and-fody/</guid>
      <description>&lt;p&gt;Immutable data structures provide a lot of benefits&#xA;to programmers, especially when representing domain&#xA;&lt;a href=&#34;https://lostechies.com/joeocampo/2007/04/23/a-discussion-on-domain-driven-design-value-objects/&#34;&gt;value objects&lt;/a&gt;.&#xA;Immutability is an essential part of functional programming paradigm.&#xA;The concept is useful in object-oriented languages too, but you have&#xA;to pay some price to get this advantage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Poker Bot with Akka.NET Actors</title>
      <link>https://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/</link>
      <pubDate>Sat, 09 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/</guid>
      <description>&lt;p&gt;&lt;i&gt;This is the fourth part of &lt;strong&gt;Building a Poker Bot&lt;/strong&gt; series where I describe my experience developing bot software to play in online poker rooms. I&amp;rsquo;m building the bot with .NET framework and F# language which makes the task relatively easy and very enjoyable. Here are the previous parts:&lt;/i&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Functional Actor Patterns with Akka.NET and F#</title>
      <link>https://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/</link>
      <pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/03/functional-actor-patterns-with-akkadotnet-and-fsharp/</guid>
      <description>&lt;p&gt;My exploration of Actor model started with &lt;a href=&#34;http://getakka.net&#34;&gt;Akka.NET&lt;/a&gt; framework - a .NET port of&#xA;JVM-based &lt;a href=&#34;http://akka.io&#34;&gt;Akka&lt;/a&gt;. Actor programming model made a lot of sense to me, but once&#xA;I started playing with it, some questions arose. Most of those questions were related to the&#xA;following &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.2/general/actors.html&#34;&gt;definition&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monads explained in C#</title>
      <link>https://mikhail.io/2016/01/monads-explained-in-csharp/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/01/monads-explained-in-csharp/</guid>
      <description>&lt;p&gt;&lt;em&gt;The newer and much longer version of this article is now available:&lt;/em&gt;&#xA;&lt;a href=&#34;https://mikhail.io/2018/07/monads-explained-in-csharp-again/&#34;&gt;Monads explained in C# (again)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;It looks like there is a mandatory post that every blogger who learns functional programming should write:&#xA;what a Monad is. Monads have the reputation of being something very abstract and very confusing for every&#xA;developer who is not a hipster Haskell programmer. They say that once you understand what a monad is, you&#xA;loose the ability to explain it in simple language. Doug Crockford was the first one to lay this rule down, but&#xA;it becomes kind of obvious once you read 3 or 5 explanations on the web. Here is my attempt, probably doomed&#xA;to fail :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Validation with Either data type in C#</title>
      <link>https://mikhail.io/2016/01/validation-with-either-data-type-in-csharp/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/01/validation-with-either-data-type-in-csharp/</guid>
      <description>&lt;p&gt;In this article we will employ a functional monadic concept &lt;strong&gt;Either&lt;/strong&gt; to make validation&#xA;code more expressive and easier to maintain.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say we get a request from some client code and we need to check if this&#xA;request is actually valid. If it&amp;rsquo;s not valid, we want to make a detailed description&#xA;of the problems that we identified. If it is valid, we want to produce a response&#xA;about the successful acceptance of the request. Let&amp;rsquo;s define the classes:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
