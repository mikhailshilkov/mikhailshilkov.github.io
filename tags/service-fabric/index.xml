<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service Fabric on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/service-fabric/</link>
    <description>Recent content in Service Fabric on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Mon, 08 Feb 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/service-fabric/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Akka.NET-style actors in Service Fabric</title>
      <link>https://mikhail.io/2016/02/akka-net-style-actors-in-service-fabric/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/02/akka-net-style-actors-in-service-fabric/</guid>
      <description>&lt;p&gt;Akka.NET and Service Fabric are the two actor frameworks that emerged in .NET world in the last year.&#xA;The two implementations of actor models are quite different. These differences are multi-faceted but&#xA;today I want to focus on API to define an actor and to communicate to it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fire-and-forget in Service Fabric actors</title>
      <link>https://mikhail.io/2016/01/fire-and-forget-in-service-fabric-actors/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/01/fire-and-forget-in-service-fabric-actors/</guid>
      <description>&lt;p&gt;At the &lt;a href=&#34;http://www.meetup.com/Webscale-Architecture-NL/events/225979118/&#34;&gt;recent Webscale Architecture meetup&lt;/a&gt;&#xA;we discussed two implementations of the Actor model in the .NET ecosystem:&#xA;&lt;a href=&#34;http://akka.net&#34;&gt;Akka.NET&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/service-fabric-reliable-actors-introduction/&#34;&gt;Azure Service Fabric Actors&lt;/a&gt;.&#xA;One important discussion was&#xA;around &lt;strong&gt;Ask&lt;/strong&gt; vs &lt;strong&gt;Tell&lt;/strong&gt; call model. With &lt;strong&gt;Tell&lt;/strong&gt; model, the Sender just sends the&#xA;message to the Recepient without waiting for a result to come back. &lt;strong&gt;Ask&lt;/strong&gt; model&#xA;means the Sender will at some point get a response back from the Receiver, potencially&#xA;blocking its own execution.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
