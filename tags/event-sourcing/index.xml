<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event Sourcing on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/event-sourcing/</link>
    <description>Recent content in Event Sourcing on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Sun, 29 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/event-sourcing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event Sourcing: Optimizing NEventStore SQL read performance</title>
      <link>https://mikhail.io/2017/01/event-sourcing-optimizing-neventstore-sql-read-performance/</link>
      <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/01/event-sourcing-optimizing-neventstore-sql-read-performance/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://mikhail.io/2016/11/event-sourcing-and-io-complexity/&#34;&gt;my previous post about Event Store read complexity&lt;/a&gt;&#xA;I described how the growth of reads from the event database might be&#xA;quadratic in respect to amount of events per aggregate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Event Sourcing and IO Complexity</title>
      <link>https://mikhail.io/2016/11/event-sourcing-and-io-complexity/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/11/event-sourcing-and-io-complexity/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Event Sourcing&lt;/strong&gt; is an approach, when an append-only store is used to record the full series of events that&#xA;describe actions taken on a particular domain entity. This event store becomes the main source of truth&#xA;to reconstruct the current state of the entity and its complete history.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
