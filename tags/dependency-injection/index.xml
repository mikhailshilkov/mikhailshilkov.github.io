<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/dependency-injection/</link>
    <description>Recent content in Dependency Injection on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Sat, 25 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Visualizing Dependency Tree from DI Container</title>
      <link>https://mikhail.io/2017/03/visualizing-dependency-tree-from-di-container/</link>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/03/visualizing-dependency-tree-from-di-container/</guid>
      <description>&lt;p&gt;So you are a C# developer. And you need to read the code and understand its&#xA;structure. Maybe you&amp;rsquo;ve just joined the project, or it&amp;rsquo;s your own code you&#xA;wrote 1 year ago. In any case, reading code is hard.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Inversion Implies Interfaces Are Owned by High-level Modules</title>
      <link>https://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/</guid>
      <description>&lt;p&gt;Dependency Inversion is one of the five principles of widely known and&#xA;acknowledged S.O.L.I.D. design guidelines. This principle is very powerful&#xA;and useful when applied consistently. But in my experience, it&amp;rsquo;s actually&#xA;quite easy to misunderstand the idea, or at least to mentally simplify it&#xA;to somewhat less profound technique of Dependency Injection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing null parameter checks</title>
      <link>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</guid>
      <description>&lt;p&gt;We use constructor dependency injection throughout our application. This means that most service classes have constructors, which accept all dependencies in form of interfaces. They are then saved to private fields to be used while class methods are executed. Here is an example (all examples below are in C#):&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
