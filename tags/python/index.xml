<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/python/</link>
    <description>Recent content in Python on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Tue, 05 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Lambda: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/aws/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/aws/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in AWS Lambda, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in Azure Functions, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Cloud Functions: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/gcp/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/gcp/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in Google Cloud Functions, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use Fiddler to debug urlfetch requests in Google AppEngine</title>
      <link>https://mikhail.io/2012/09/02/use-fiddler-to-debug-urlfetch-requests-in-google-appengine/</link>
      <pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2012/09/02/use-fiddler-to-debug-urlfetch-requests-in-google-appengine/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://www.tripbenefit.com&#34; title=&#34;TripBenefit.com - travel in St. Petersburg, Russia&#34;&gt;TripBenefit&lt;/a&gt; application, we use a lot of web crawling to get data from third-party websites. As the application works on top of Google AppEngine, the &lt;a href=&#34;https://developers.google.com/appengine/docs/python/urlfetch/fetchfunction?hl=ru&#34; title=&#34;urlfetch.fetch() docs&#34;&gt;urlfetch.fetch()&lt;/a&gt; function is used to send HTTP requests and get responses.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enable jinja2 and i18n translations on Google AppEngine</title>
      <link>https://mikhail.io/2012/07/26/enable-jinja2-and-i18n-translations-on-google-appengine/</link>
      <pubDate>Thu, 26 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2012/07/26/enable-jinja2-and-i18n-translations-on-google-appengine/</guid>
      <description>&lt;p&gt;My initial goal was to make our new application (based on python/AppEngine) translatable. This means the following requirements:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;All strings in the application must be translatable&lt;/li&gt;&#xA;&lt;li&gt;Translations should preferably stored in separate files&lt;/li&gt;&#xA;&lt;li&gt;It should be easy to use the translations both in .py files and html templates&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The solution that I came to after a couple of hours includes the following components: Babel (string file generation), i18n.gettext (getting strings in code) and jinja2 &amp;lt;% trans %&amp;gt; tag (getting strings in templates). The setup of all this is not obvious, so I&amp;rsquo;ll put the steps in this blog post. Let&amp;rsquo;s start!&lt;/p&gt;</description>
    </item>
    <item>
      <title>API to get the list of hotels</title>
      <link>https://mikhail.io/2012/05/17/api-to-get-the-list-of-hotels/</link>
      <pubDate>Thu, 17 May 2012 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2012/05/17/api-to-get-the-list-of-hotels/</guid>
      <description>&lt;p&gt;In our travelling application, we need to show the list of hotels in a city (St. Petersburg, Russia at the moment, but more will be needed in the future). The idea was to find a hotel information provider, and then upload the complete list into our own database. The following info is needed for each hotel:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
