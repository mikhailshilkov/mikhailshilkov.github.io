<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TDD on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/tdd/</link>
    <description>Recent content in TDD on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Thu, 21 May 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit Testing Cloud Deployments with Pulumi in C#</title>
      <link>https://mikhail.io/2020/05/unit-testing-cloud-deployments-with-pulumi-in-csharp/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/05/unit-testing-cloud-deployments-with-pulumi-in-csharp/</guid>
      <description>&lt;p&gt;Because Pulumi uses general-purpose programming languages to provision cloud resources, you can take advantage of native tools and perform automated tests of your infrastructure. The full power of each language is available, including access to libraries and frameworks for testing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Testing Cloud Deployments with Pulumi in F#</title>
      <link>https://mikhail.io/2020/05/unit-testing-cloud-deployments-with-pulumi-in-fsharp/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/05/unit-testing-cloud-deployments-with-pulumi-in-fsharp/</guid>
      <description>&lt;p&gt;Because Pulumi uses general-purpose programming languages to provision cloud resources, you can take advantage of native tools and perform automated tests of your infrastructure. The full power of each language is available, including access to libraries and frameworks for testing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing Dapper repositories</title>
      <link>https://mikhail.io/2016/02/unit-testing-dapper-repositories/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/02/unit-testing-dapper-repositories/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/StackExchange/dapper-dot-net&#34;&gt;Dapper&lt;/a&gt; is a micro-ORM library which is&#xA;very simple and super fast. In our projects we use Dapper for the tasks where something like&#xA;EntityFramework or NHibernate would be an overkill.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing null parameter checks</title>
      <link>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</guid>
      <description>&lt;p&gt;We use constructor dependency injection throughout our application. This means that most service classes have constructors, which accept all dependencies in form of interfaces. They are then saved to private fields to be used while class methods are executed. Here is an example (all examples below are in C#):&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
