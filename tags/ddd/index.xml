<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/ddd/</link>
    <description>Recent content in DDD on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Tue, 22 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/ddd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weaving your domain classes with Fody</title>
      <link>https://mikhail.io/2015/12/weaving-your-domain-classes-with-fody/</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/12/weaving-your-domain-classes-with-fody/</guid>
      <description>&lt;p&gt;When I model the business domain with C#, the resulting data structures tend to contain a lot of boilerplate code. It&amp;rsquo;s repeated from class to class and it gets more difficult to see the essence of the model behind the repetitive cruft. Here is a simplistic example, which illustrates the problem. Let&amp;rsquo;s say we are modelling Trips, and for each &lt;code&gt;Trip&lt;/code&gt; we need to keep track of &lt;code&gt;Origin&lt;/code&gt;, &lt;code&gt;Destination&lt;/code&gt; and &lt;code&gt;Vehicle&lt;/code&gt; which executes the &lt;code&gt;Trip&lt;/code&gt;, nothing else. Here is a code to create an sample trip:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Units of measurement in domain design</title>
      <link>https://mikhail.io/2015/08/units-of-measurement-in-domain-design/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/08/units-of-measurement-in-domain-design/</guid>
      <description>&lt;p&gt;If you have business application of any decent size, your most important code probably resides in domain logic.&#xA;When working with 3rd party code, you can always find an answer on stack overflow or official documentation, but your domain is all yours. Try to make it as simple and readable as possible, and it will always pay you back.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
