<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serverless on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/serverless/</link>
    <description>Recent content in Serverless on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Tue, 02 Nov 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/serverless/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploying new Azure Container Apps with familiar languages</title>
      <link>https://mikhail.io/2021/11/deploying-azure-container-apps/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2021/11/deploying-azure-container-apps/</guid>
      <description>&lt;p&gt;Today, &lt;a href=&#34;https://aka.ms/containerapps/ignite-blog&#34;&gt;Microsoft announced&lt;/a&gt; a new general-purpose serverless container platform: &lt;a href=&#34;https://aka.ms/containerapps/&#34;&gt;Azure Container Apps&lt;/a&gt;. Container Apps is a fully managed platform for microservice applications that runs on top of Kubernetes and open-source technologies like KEDA, Envoy, and Dapr.&lt;/p&gt;&#xA;&lt;p&gt;Container Apps are designed to abstract infrastructure management with flexible serverless containers. Developers can run containers at scale without the burden of standing up and managing a Kubernetes cluster manually.&lt;/p&gt;&#xA;&lt;p&gt;We are happy to announce same-day support for Azure Container Apps in the Pulumi Azure Native Provider, which covers 100% of the Azure Resource Manager APIs and gives you highest fidelity integration with Azure&amp;rsquo;s resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running Container Images in AWS Lambda</title>
      <link>https://mikhail.io/2020/12/aws-lambda-container-support/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/12/aws-lambda-container-support/</guid>
      <description>&lt;p&gt;When AWS Lambda launched in 2014, it pioneered the concept of Function-as-a-Service. Developers could write a function in one of the supported programming languages, upload it to AWS, and Lambda executes the function on every invocation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eliminate Cold Starts by Predicting Invocations of Serverless Functions</title>
      <link>https://mikhail.io/2020/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</guid>
      <description>&lt;p&gt;Developers and decision-makers often mention &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;cold starts&lt;/a&gt; as a significant drawback of serverless functions. Cloud providers continually invest in reducing the latency of a cold start, but they haven&amp;rsquo;t done much to prevent them altogether. The most common technique is to keep a worker alive for 10-20 minutes after each request, hoping that another request comes in and benefits from the warm instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless in the Wild: Azure Functions Production Usage Statistics</title>
      <link>https://mikhail.io/2020/05/serverless-in-the-wild-azure-functions-usage-stats/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/05/serverless-in-the-wild-azure-functions-usage-stats/</guid>
      <description>&lt;p&gt;Microsoft Azure and Microsoft Research &lt;a href=&#34;https://arxiv.org/pdf/2003.03423.pdf&#34;&gt;released&lt;/a&gt; a paper called &amp;ldquo;Serverless in the Wild: Characterizing and Optimizing the Serverless Workload at a Large Cloud Provider&amp;rdquo;. In part 1 of the paper, they revealed some insightful statistics about the actual production usage of Azure Functions for two weeks in summer 2019.&lt;/p&gt;</description>
    </item>
    <item>
      <title>InfiniCache: Distributed Cache on Top of AWS Lambda (paper review)</title>
      <link>https://mikhail.io/2020/03/infinicache-distributed-cache-on-aws-lambda/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/03/infinicache-distributed-cache-on-aws-lambda/</guid>
      <description>&lt;p&gt;&amp;ldquo;InfiniCache: Exploiting Ephemeral Serverless Functions to Build a Cost-Effective Memory Cache&amp;rdquo; by Ao Wang, et al. (&lt;a href=&#34;https://www.usenix.org/conference/fast20/presentation/wang-ao&#34;&gt;link&lt;/a&gt;) is a recently published paper which describes a prototype of a serverless distributed caching system sitting atop AWS Lambda.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hosting Azure Functions in Google Cloud Run</title>
      <link>https://mikhail.io/2020/02/azure-functions-in-google-cloud-run/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/02/azure-functions-in-google-cloud-run/</guid>
      <description>&lt;p&gt;Suppose you are a .NET developer, you love the Function-as-a-Service (FaaS) model, but you want to run your serverless functions in Google Cloud. You want to keep using C# or F#, and still leverage all serverless benefits—ease of use, scalability, elasticity, pay-per-value cost model—running in GCP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless Containers with Google Cloud Run</title>
      <link>https://mikhail.io/2020/02/serverless-containers-with-google-cloud-run/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/02/serverless-containers-with-google-cloud-run/</guid>
      <description>&lt;p&gt;Google &lt;a href=&#34;https://cloud.google.com/run/&#34;&gt;Cloud Run&lt;/a&gt; is the latest addition to the serverless compute family. While it may look similar to existing services of public cloud, the feature set makes Cloud Run unique:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Provisioned Concurrency: Avoiding Cold Starts in AWS Lambda</title>
      <link>https://mikhail.io/2019/12/aws-lambda-provisioned-concurrency-no-cold-starts/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/12/aws-lambda-provisioned-concurrency-no-cold-starts/</guid>
      <description>&lt;p&gt;AWS recently &lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-provisioned-concurrency-for-lambda-functions/&#34;&gt;announced&lt;/a&gt; the launch of &lt;strong&gt;Provisioned Concurrency&lt;/strong&gt;, a new feature of AWS Lambda that intends to solve the problem of cold starts. In this article, we take another look at the problem of latency-critical serverless applications, and how the new feature impacts the status-quo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Choosing the Best Deployment Tool for Your Serverless Applications</title>
      <link>https://mikhail.io/2019/11/choosing-the-best-deployment-tool-for-serverless-applications/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/11/choosing-the-best-deployment-tool-for-serverless-applications/</guid>
      <description>&lt;p&gt;Function-as-a-Service solutions, such as AWS Lambda and Azure Functions, are a great way to build modern, scalable, and affordable cloud-native applications. By delegating routine work to cloud providers, serverless applications focus on custom logic to provide the ultimate business value. But, in fact, serverless is more than cloud functions. It&amp;rsquo;s storage, HTTP gateways, databases, queues, monitoring, and security&amp;mdash;and your serverless applications are likely to use multiple managed services and consist of many moving parts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy a Function App with KEDA (Kubernetes-based Event-Driven Autoscaling)</title>
      <link>https://mikhail.io/2019/10/how-to-deploy-a-function-app-with-keda/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/10/how-to-deploy-a-function-app-with-keda/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Azure Functions&lt;/strong&gt; is a managed service for serverless applications in the Azure cloud. More broadly, Azure Functions is a runtime with multiple hosting possibilities. &lt;strong&gt;KEDA&lt;/strong&gt; (&lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/05/06/announcing-keda-kubernetes-event-driven-autoscaling-containers/&#34;&gt;Kubernetes-based Event-Driven Autoscaling&lt;/a&gt;) is an emerging option to host this runtime in &lt;strong&gt;Kubernetes&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ten Pearls With Azure Functions in Pulumi</title>
      <link>https://mikhail.io/2019/08/ten-pearls-with-azure-functions-in-pulumi/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/08/ten-pearls-with-azure-functions-in-pulumi/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll take a look at 10 &amp;ldquo;pearls&amp;rdquo;—bite-sized code snippets—that demonstrate using Pulumi to build serverless applications with Azure Functions and infrastructure as code. These pearls are organized into four categories, each demonstrating a unique scenario:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Function App Deployment&lt;/strong&gt;: Deploy an existing Azure Functions application using infrastructure as code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP Functions as Callbacks&lt;/strong&gt;: Mix JavaScript or TypeScript functions with your infrastructure definition to produce strongly-typed, self-contained, serverless HTTP endpoints.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cloud Event Handling&lt;/strong&gt;: Leverage a variety of event sources available to Azure Functions with lightweight event handlers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Flows with Function Bindings&lt;/strong&gt;: Take advantage of function bindings—declarative connectors to Azure services.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Load-Testing Azure Functions with Loader.io</title>
      <link>https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/</guid>
      <description>&lt;p&gt;When Azure Functions team presented the new &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-premium-plan&#34;&gt;Premium plan&lt;/a&gt;, they made a series of demos which compared the response time of a Function App running on the Consumption plan vs. an App running on the Premium plan. Both apps would receive a rapid growth of incoming requests, and then the percentiles of response latencies were compared.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Globally-distributed Serverless Application in 100 Lines of Code. Infrastructure Included!</title>
      <link>https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/</guid>
      <description>&lt;p&gt;Pulumi is excellent at connecting multiple cloud components into a cohesive application. In my &lt;a href=&#34;https://blog.pulumi.com/serverless-as-simple-callbacks-with-pulumi-and-azure-functions&#34;&gt;previous post&lt;/a&gt;, I introduced the way to mix JavaScript or TypeScript serverless functions directly into the cloud infrastructure programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless as Simple Callbacks with Pulumi and Azure Functions</title>
      <link>https://mikhail.io/2019/05/serverless-as-simple-callbacks-with-pulumi-and-azure-functions/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/05/serverless-as-simple-callbacks-with-pulumi-and-azure-functions/</guid>
      <description>&lt;p&gt;Serverless compute services, like Azure Functions, offer an amazing power to application developers to leverage: highly available, automatically scaled, low-ceremony, pay-per-value functions created in several lines of code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reducing Cold Start Duration in Azure Functions</title>
      <link>https://mikhail.io/2019/03/reducing-azure-functions-cold-start-time/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/reducing-azure-functions-cold-start-time/</guid>
      <description>&lt;p&gt;Back in February, I published the first version of &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/azure/&#34;&gt;Cold Starts in Azure Functions&lt;/a&gt;—the detailed analysis of cold start durations in serverless Azure. The article showed the following numbers for C# and JavaScript functions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency and Isolation in Serverless Functions</title>
      <link>https://mikhail.io/2019/03/concurrency-and-isolation-in-serverless-functions/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/concurrency-and-isolation-in-serverless-functions/</guid>
      <description>&lt;p&gt;Serverless vendors have different approaches when it comes to sharing or isolating resources between multiple executions of the same cloud function. In this article, I&amp;rsquo;ll explore the execution concurrency models of three FaaS offerings and the associated trade-offs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless at Scale: Serving StackOverflow-like Traffic</title>
      <link>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</guid>
      <description>&lt;p&gt;Serverless compute is a very productive and quick way to get an application up and running. A developer writes a piece of code that solves a particular task and uploads it to the cloud. The provider handles code deployment and the ops burden of managing all the required infrastructure, so that the Function is always available, secure and performant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Fairy Tale of F# and Durable Functions</title>
      <link>https://mikhail.io/2018/12/fairy-tale-of-fsharp-and-durable-functions/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/12/fairy-tale-of-fsharp-and-durable-functions/</guid>
      <description>&lt;p&gt;&lt;em&gt;The post is a part of&#xA;&lt;a href=&#34;https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/&#34;&gt;F# Advent Calendar 2018&lt;/a&gt;.&#xA;It&amp;rsquo;s Christmas time!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This summer I was hired by the office of Santa Claus. Santa is not just a fairy tale&#xA;character on his own—he leads a large organization that supplies gifts and happiness to millions of&#xA;children around the globe. Like any large organization, Santa&amp;rsquo;s office employs an impressive number of&#xA;IT systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Sense of Azure Durable Functions</title>
      <link>https://mikhail.io/2018/12/making-sense-of-azure-durable-functions/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/12/making-sense-of-azure-durable-functions/</guid>
      <description>&lt;p&gt;Stateful Workflows on top of Stateless Serverless Cloud Functions—this is the essence&#xA;of the Azure Durable Functions library. That&amp;rsquo;s a lot of fancy words in one sentence, and they&#xA;might be hard for the majority of readers to understand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From 0 to 1000 Instances: How Serverless Providers Scale Queue Processing</title>
      <link>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</guid>
      <description>&lt;p&gt;Whenever I see a &amp;ldquo;Getting Started with Function-as-a-Service&amp;rdquo; tutorial, it usually shows off&#xA;a synchronous HTTP-triggered scenario. In my projects, though, I use a lot of asynchronous&#xA;functions triggered by a queue or an event stream.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions V2 Is Released, How Performant Is It?</title>
      <link>https://mikhail.io/2018/10/azure-functions-v2-released-how-performant-is-it/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/10/azure-functions-v2-released-how-performant-is-it/</guid>
      <description>&lt;p&gt;Azure Functions major version 2.0 was released into GA a few days back during Microsoft Ignite. The runtime is now&#xA;based on .NET Core and thus is cross-platform and more interoperable. It has a nice extensibility story too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless: Cold Start War</title>
      <link>https://mikhail.io/2018/08/serverless-cold-start-war/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/08/serverless-cold-start-war/</guid>
      <description>&lt;p&gt;&lt;em&gt;The newer and much more detailed cold start comparison is now available: &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;Cold Starts in Serverless Functions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Serverless cloud services are hot. Except when they are not :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda Warmer as Pulumi Component</title>
      <link>https://mikhail.io/2018/08/aws-lambda-warmer-as-pulumi-component/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/08/aws-lambda-warmer-as-pulumi-component/</guid>
      <description>&lt;p&gt;Out of curiosity, I&amp;rsquo;m currently investigating cold starts of Function-as-a-Service platforms of major cloud providers. Basically,&#xA;if a function is not called for several minutes, the cloud instance behind it might be recycled, and then the next request will&#xA;take longer because a new instance will need to be provisioned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with AWS Lambda in Pulumi</title>
      <link>https://mikhail.io/2018/07/getting-started-with-aws-lambda-in-pulumi/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/07/getting-started-with-aws-lambda-in-pulumi/</guid>
      <description>&lt;p&gt;For a small research project of mine, I needed to create HTTP triggered&#xA;AWS Lambda&amp;rsquo;s in all supported programming languages.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m not a power AWS user, so I get easily confused about the configuration&#xA;of things like IAM roles or API Gateway. Moreover, I wanted my environment to&#xA;be reproducible, so manual AWS Console wasn&amp;rsquo;t a good option.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cold Starts Beyond First Request in Azure Functions</title>
      <link>https://mikhail.io/2018/05/azure-functions-cold-starts-beyond-first-load/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/05/azure-functions-cold-starts-beyond-first-load/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/&#34;&gt;previous article&lt;/a&gt;&#xA;I&amp;rsquo;ve explored the topic of Cold Starts in Azure Functions. Particularly, I&amp;rsquo;ve measured the&#xA;cold start delays per language and runtime version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Cold Starts in Numbers</title>
      <link>https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/</guid>
      <description>&lt;p&gt;Auto-provisioning and auto-scalability are the killer features of Function-as-a-Service&#xA;cloud offerings, and Azure Functions in particular.&lt;/p&gt;&#xA;&lt;p&gt;One drawback of such dynamic provisioning is a phenomenon called &amp;ldquo;Cold Start&amp;rdquo;. Basically,&#xA;applications that haven&amp;rsquo;t been used for a while take longer to startup and to handle the&#xA;first request.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
