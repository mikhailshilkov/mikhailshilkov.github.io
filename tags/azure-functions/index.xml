<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure Functions on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/azure-functions/</link>
    <description>Recent content in Azure Functions on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Tue, 05 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/azure-functions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Functions: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in Azure Functions, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cold Starts in Azure Functions</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/</guid>
      <description>&lt;p&gt;This article describes Azure Functions running on Consumption Plan—the dynamically scaled and billed-per-execution compute service. Consumption Plan adds and removes instances dynamically. When a new instance handles its first request, the response time increases, which is called a &lt;strong&gt;cold start&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparison of Cold Starts in Serverless Functions across AWS, Azure, and GCP</title>
      <link>https://mikhail.io/serverless/coldstarts/big3/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/big3/</guid>
      <description>&lt;p&gt;This article compares Function-as-a-Service offerings of Big-3 cloud providers in terms of cold starts. AWS Lambda, Azure Functions (Consumption Plan), and Google Cloud Functions are all dynamically scaled and billed-per-execution compute services. Instances of cloud functions are added and removed dynamically. When a new instance handles its first request, the response time increases, which is called a &lt;strong&gt;cold start&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When Does Cold Start Happen on Azure Functions?</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/intervals/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/intervals/</guid>
      <description>&lt;p&gt;The first cold start happens when the very first request comes in after deployment.&lt;/p&gt;&#xA;&lt;p&gt;After that request is processed, the instance stays alive for the time being to be reused for subsequent requests. But for how long?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eliminate Cold Starts by Predicting Invocations of Serverless Functions</title>
      <link>https://mikhail.io/2020/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</guid>
      <description>&lt;p&gt;Developers and decision-makers often mention &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;cold starts&lt;/a&gt; as a significant drawback of serverless functions. Cloud providers continually invest in reducing the latency of a cold start, but they haven&amp;rsquo;t done much to prevent them altogether. The most common technique is to keep a worker alive for 10-20 minutes after each request, hoping that another request comes in and benefits from the warm instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless in the Wild: Azure Functions Production Usage Statistics</title>
      <link>https://mikhail.io/2020/05/serverless-in-the-wild-azure-functions-usage-stats/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/05/serverless-in-the-wild-azure-functions-usage-stats/</guid>
      <description>&lt;p&gt;Microsoft Azure and Microsoft Research &lt;a href=&#34;https://arxiv.org/pdf/2003.03423.pdf&#34;&gt;released&lt;/a&gt; a paper called &amp;ldquo;Serverless in the Wild: Characterizing and Optimizing the Serverless Workload at a Large Cloud Provider&amp;rdquo;. In part 1 of the paper, they revealed some insightful statistics about the actual production usage of Azure Functions for two weeks in summer 2019.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hosting Azure Functions in Google Cloud Run</title>
      <link>https://mikhail.io/2020/02/azure-functions-in-google-cloud-run/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/02/azure-functions-in-google-cloud-run/</guid>
      <description>&lt;p&gt;Suppose you are a .NET developer, you love the Function-as-a-Service (FaaS) model, but you want to run your serverless functions in Google Cloud. You want to keep using C# or F#, and still leverage all serverless benefits—ease of use, scalability, elasticity, pay-per-value cost model—running in GCP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Choosing the Best Deployment Tool for Your Serverless Applications</title>
      <link>https://mikhail.io/2019/11/choosing-the-best-deployment-tool-for-serverless-applications/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/11/choosing-the-best-deployment-tool-for-serverless-applications/</guid>
      <description>&lt;p&gt;Function-as-a-Service solutions, such as AWS Lambda and Azure Functions, are a great way to build modern, scalable, and affordable cloud-native applications. By delegating routine work to cloud providers, serverless applications focus on custom logic to provide the ultimate business value. But, in fact, serverless is more than cloud functions. It&amp;rsquo;s storage, HTTP gateways, databases, queues, monitoring, and security&amp;mdash;and your serverless applications are likely to use multiple managed services and consist of many moving parts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda vs. Azure Functions: 10 Major Differences</title>
      <link>https://mikhail.io/2019/10/aws-lambda-vs-azure-functions-ten-major-differences/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/10/aws-lambda-vs-azure-functions-ten-major-differences/</guid>
      <description>&lt;p&gt;Forget about managing virtual machines or paying for idle hardware! Serverless compute brings unlimited scale and high availability to every company in the world, from small startups to multinational corporations. At least, that’s the vision of Amazon and Microsoft, today’s biggest cloud vendors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy a Function App with KEDA (Kubernetes-based Event-Driven Autoscaling)</title>
      <link>https://mikhail.io/2019/10/how-to-deploy-a-function-app-with-keda/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/10/how-to-deploy-a-function-app-with-keda/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Azure Functions&lt;/strong&gt; is a managed service for serverless applications in the Azure cloud. More broadly, Azure Functions is a runtime with multiple hosting possibilities. &lt;strong&gt;KEDA&lt;/strong&gt; (&lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/05/06/announcing-keda-kubernetes-event-driven-autoscaling-containers/&#34;&gt;Kubernetes-based Event-Driven Autoscaling&lt;/a&gt;) is an emerging option to host this runtime in &lt;strong&gt;Kubernetes&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ten Pearls With Azure Functions in Pulumi</title>
      <link>https://mikhail.io/2019/08/ten-pearls-with-azure-functions-in-pulumi/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/08/ten-pearls-with-azure-functions-in-pulumi/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll take a look at 10 &amp;ldquo;pearls&amp;rdquo;—bite-sized code snippets—that demonstrate using Pulumi to build serverless applications with Azure Functions and infrastructure as code. These pearls are organized into four categories, each demonstrating a unique scenario:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Function App Deployment&lt;/strong&gt;: Deploy an existing Azure Functions application using infrastructure as code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP Functions as Callbacks&lt;/strong&gt;: Mix JavaScript or TypeScript functions with your infrastructure definition to produce strongly-typed, self-contained, serverless HTTP endpoints.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cloud Event Handling&lt;/strong&gt;: Leverage a variety of event sources available to Azure Functions with lightweight event handlers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Flows with Function Bindings&lt;/strong&gt;: Take advantage of function bindings—declarative connectors to Azure services.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>How to Measure the Cost of Azure Functions</title>
      <link>https://mikhail.io/2019/08/how-to-measure-the-cost-of-azure-functions/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/08/how-to-measure-the-cost-of-azure-functions/</guid>
      <description>&lt;p&gt;Azure Functions can be hosted in multiple ways: there&amp;rsquo;s an App Service plan with a fixed cost per hour, a new Premium plan with both fixed and variable price components, not to mention self-managed options based on container technologies. Instead of any of those three, this article focuses on Consumption plan—the classic serverless offering billed purely based on the actual usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Load-Testing Azure Functions with Loader.io</title>
      <link>https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/</guid>
      <description>&lt;p&gt;When Azure Functions team presented the new &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-premium-plan&#34;&gt;Premium plan&lt;/a&gt;, they made a series of demos which compared the response time of a Function App running on the Consumption plan vs. an App running on the Premium plan. Both apps would receive a rapid growth of incoming requests, and then the percentiles of response latencies were compared.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Globally-distributed Serverless Application in 100 Lines of Code. Infrastructure Included!</title>
      <link>https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/</guid>
      <description>&lt;p&gt;Pulumi is excellent at connecting multiple cloud components into a cohesive application. In my &lt;a href=&#34;https://blog.pulumi.com/serverless-as-simple-callbacks-with-pulumi-and-azure-functions&#34;&gt;previous post&lt;/a&gt;, I introduced the way to mix JavaScript or TypeScript serverless functions directly into the cloud infrastructure programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless as Simple Callbacks with Pulumi and Azure Functions</title>
      <link>https://mikhail.io/2019/05/serverless-as-simple-callbacks-with-pulumi-and-azure-functions/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/05/serverless-as-simple-callbacks-with-pulumi-and-azure-functions/</guid>
      <description>&lt;p&gt;Serverless compute services, like Azure Functions, offer an amazing power to application developers to leverage: highly available, automatically scaled, low-ceremony, pay-per-value functions created in several lines of code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reducing Cold Start Duration in Azure Functions</title>
      <link>https://mikhail.io/2019/03/reducing-azure-functions-cold-start-time/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/reducing-azure-functions-cold-start-time/</guid>
      <description>&lt;p&gt;Back in February, I published the first version of &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/azure/&#34;&gt;Cold Starts in Azure Functions&lt;/a&gt;—the detailed analysis of cold start durations in serverless Azure. The article showed the following numbers for C# and JavaScript functions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency and Isolation in Serverless Functions</title>
      <link>https://mikhail.io/2019/03/concurrency-and-isolation-in-serverless-functions/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/concurrency-and-isolation-in-serverless-functions/</guid>
      <description>&lt;p&gt;Serverless vendors have different approaches when it comes to sharing or isolating resources between multiple executions of the same cloud function. In this article, I&amp;rsquo;ll explore the execution concurrency models of three FaaS offerings and the associated trade-offs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Cold Starts</title>
      <link>https://mikhail.io/2019/03/visualizing-cold-starts/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/visualizing-cold-starts/</guid>
      <description>&lt;p&gt;I &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;wrote a lot&lt;/a&gt; about cold starts of serverless functions. The articles are full of charts and numbers which are hopefully useful but might be hard to internalize. I decided to come up with a way to represent colds starts visually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless at Scale: Serving StackOverflow-like Traffic</title>
      <link>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</guid>
      <description>&lt;p&gt;Serverless compute is a very productive and quick way to get an application up and running. A developer writes a piece of code that solves a particular task and uploads it to the cloud. The provider handles code deployment and the ops burden of managing all the required infrastructure, so that the Function is always available, secure and performant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Fairy Tale of F# and Durable Functions</title>
      <link>https://mikhail.io/2018/12/fairy-tale-of-fsharp-and-durable-functions/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/12/fairy-tale-of-fsharp-and-durable-functions/</guid>
      <description>&lt;p&gt;&lt;em&gt;The post is a part of&#xA;&lt;a href=&#34;https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/&#34;&gt;F# Advent Calendar 2018&lt;/a&gt;.&#xA;It&amp;rsquo;s Christmas time!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This summer I was hired by the office of Santa Claus. Santa is not just a fairy tale&#xA;character on his own—he leads a large organization that supplies gifts and happiness to millions of&#xA;children around the globe. Like any large organization, Santa&amp;rsquo;s office employs an impressive number of&#xA;IT systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Sense of Azure Durable Functions</title>
      <link>https://mikhail.io/2018/12/making-sense-of-azure-durable-functions/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/12/making-sense-of-azure-durable-functions/</guid>
      <description>&lt;p&gt;Stateful Workflows on top of Stateless Serverless Cloud Functions—this is the essence&#xA;of the Azure Durable Functions library. That&amp;rsquo;s a lot of fancy words in one sentence, and they&#xA;might be hard for the majority of readers to understand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From 0 to 1000 Instances: How Serverless Providers Scale Queue Processing</title>
      <link>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</guid>
      <description>&lt;p&gt;Whenever I see a &amp;ldquo;Getting Started with Function-as-a-Service&amp;rdquo; tutorial, it usually shows off&#xA;a synchronous HTTP-triggered scenario. In my projects, though, I use a lot of asynchronous&#xA;functions triggered by a queue or an event stream.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions V2 Is Released, How Performant Is It?</title>
      <link>https://mikhail.io/2018/10/azure-functions-v2-released-how-performant-is-it/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/10/azure-functions-v2-released-how-performant-is-it/</guid>
      <description>&lt;p&gt;Azure Functions major version 2.0 was released into GA a few days back during Microsoft Ignite. The runtime is now&#xA;based on .NET Core and thus is cross-platform and more interoperable. It has a nice extensibility story too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless: Cold Start War</title>
      <link>https://mikhail.io/2018/08/serverless-cold-start-war/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/08/serverless-cold-start-war/</guid>
      <description>&lt;p&gt;&lt;em&gt;The newer and much more detailed cold start comparison is now available: &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;Cold Starts in Serverless Functions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Serverless cloud services are hot. Except when they are not :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cold Starts Beyond First Request in Azure Functions</title>
      <link>https://mikhail.io/2018/05/azure-functions-cold-starts-beyond-first-load/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/05/azure-functions-cold-starts-beyond-first-load/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/&#34;&gt;previous article&lt;/a&gt;&#xA;I&amp;rsquo;ve explored the topic of Cold Starts in Azure Functions. Particularly, I&amp;rsquo;ve measured the&#xA;cold start delays per language and runtime version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Cold Starts in Numbers</title>
      <link>https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/</guid>
      <description>&lt;p&gt;Auto-provisioning and auto-scalability are the killer features of Function-as-a-Service&#xA;cloud offerings, and Azure Functions in particular.&lt;/p&gt;&#xA;&lt;p&gt;One drawback of such dynamic provisioning is a phenomenon called &amp;ldquo;Cold Start&amp;rdquo;. Basically,&#xA;applications that haven&amp;rsquo;t been used for a while take longer to startup and to handle the&#xA;first request.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Awesome F# Exchange 2018</title>
      <link>https://mikhail.io/2018/04/fsharp-exchange-2018/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/04/fsharp-exchange-2018/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m writing this post in the train to London Stensted, on my way back from F# Exchange 2018&#xA;conference.&lt;/p&gt;&#xA;&lt;p&gt;F# Exchange is a yearly conference taking place in London, and 2018 edition was the first one&#xA;for me personally. I also had an honour to speak there about creating Azure Functions with&#xA;F#.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Durable Functions in F#</title>
      <link>https://mikhail.io/2018/02/azure-durable-functions-in-fsharp/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/02/azure-durable-functions-in-fsharp/</guid>
      <description>&lt;p&gt;Azure Functions are designed for stateless, fast-to-execute,&#xA;simple actions. Typically, they are triggered by an HTTP call or a queue message,&#xA;then they read something from the storage or database and return the result&#xA;to the caller or send it to another queue. All within several seconds at most.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Load Testing Azure SQL Database by Copying Traffic from Production SQL Server</title>
      <link>https://mikhail.io/2018/02/load-testing-azure-sql-database-by-copying-traffic-from-production-sql-server/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/02/load-testing-azure-sql-database-by-copying-traffic-from-production-sql-server/</guid>
      <description>&lt;p&gt;Azure SQL Database is a managed service that provides low-maintenance SQL Server instances in the cloud.&#xA;You don&amp;rsquo;t have to run and update VMs, or even take backups and setup failover clusters.&#xA;Microsoft will do administration for you, you just pay an hourly fee.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tic-Tac-Toe with F#, Azure Functions, HATEOAS and Property-Based Testing</title>
      <link>https://mikhail.io/2018/01/tictactoe-with-fsharp-azurefunctions-hateoas-and-property-based-testing/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/01/tictactoe-with-fsharp-azurefunctions-hateoas-and-property-based-testing/</guid>
      <description>&lt;p&gt;This post describes a toy application that I&amp;rsquo;ve built with F# and Azure Functions&#xA;in about 1 day of work. It shows a simple end-to-end implementation with some&#xA;useful techniques applied, and can be used as a reference point for anyone interested in&#xA;one of the topics mentioned in the title.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions Get More Scalable and Elastic</title>
      <link>https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/</guid>
      <description>&lt;p&gt;Back in August this year, I&amp;rsquo;ve posted&#xA;&lt;a href=&#34;https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/&#34;&gt;Azure Functions: Are They Really Infinitely Scalable and Elastic?&lt;/a&gt;&#xA;with two experiments about Azure Function App auto scaling. I ran a simple&#xA;CPU-bound function based on Bcrypt hashing, and measured how well Azure&#xA;was running my Function under load.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precompiled Azure Functions in F#</title>
      <link>https://mikhail.io/2017/12/precompiled-azure-functions-in-fsharp/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/12/precompiled-azure-functions-in-fsharp/</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is giving a start to&#xA;&lt;a href=&#34;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&#34;&gt;F# Advent Calendar in English 2017&lt;/a&gt;.&#xA;Please follow the calendar for all the great posts to come.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Azure Functions is a &amp;ldquo;serverless&amp;rdquo; cloud offering from Microsoft. It&#xA;allows you to run your custom code as response to events in the cloud.&#xA;Functions are very easy to&#xA;start with; and you only pay per execution - with free allowance sufficient&#xA;for any proof-of-concept, hobby project or even low-usage production loads.&#xA;And when you need more, Azure will scale your project up automatically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure F#unctions Talk at FSharping Meetup in Prague</title>
      <link>https://mikhail.io/2017/11/azure-functions-fsharp-talk/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/11/azure-functions-fsharp-talk/</guid>
      <description>&lt;p&gt;On November 8th 2017 I gave a talk about developing Azure Functions&#xA;in F# at&#xA;&lt;a href=&#34;https://www.meetup.com/FSharping/events/244137693/&#34;&gt;FSharping&lt;/a&gt;&#xA;meetup in Prague.&lt;/p&gt;&#xA;&lt;p&gt;I really enjoyed giving this talk: the audience was&#xA;great and asked awesome questions. One more prove that F# community is&#xA;so welcoming and energizing!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Function Triggered by Azure Event Grid</title>
      <link>https://mikhail.io/2017/10/azure-function-triggered-by-azure-event-grid/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/10/azure-function-triggered-by-azure-event-grid/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update: I missed the elephant in the room. There actually exists a specialized&#xA;trigger for Event Grid binding. In the portal, just select &lt;code&gt;Experimental&lt;/code&gt;&#xA;in &lt;code&gt;Scenario&lt;/code&gt; drop down while creating the function. In precompiled&#xA;functions, reference &lt;code&gt;Microsoft.Azure.WebJobs.Extensions.EventGrid&lt;/code&gt; NuGet&#xA;package.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Are They Really Infinitely Scalable and Elastic?</title>
      <link>https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/</guid>
      <description>&lt;p&gt;&lt;em&gt;Updated results are available at&#xA;&lt;a href=&#34;https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/&#34;&gt;Azure Functions Get More Scalable and Elastic&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Automatic elastic scaling is a built-in feature of Serverless computing&#xA;paradigm. One doesn&amp;rsquo;t have to provision servers anymore, they just need to&#xA;write code that will be provisioned on as many servers as needed based on the&#xA;actual load. That&amp;rsquo;s the theory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Authoring a Custom Binding for Azure Functions</title>
      <link>https://mikhail.io/2017/07/authoring-custom-binding-azure-functions/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/authoring-custom-binding-azure-functions/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/&#34;&gt;previous post&lt;/a&gt;&#xA;I described how I used Durable Functions extensions&#xA;in Azure Function App. Durable Functions are using several binding types&#xA;that are not part of the standard suite: &lt;code&gt;OrchestrationClient&lt;/code&gt;,&#xA;&lt;code&gt;OrchestrationTrigger&lt;/code&gt;, &lt;code&gt;ActivityTrigger&lt;/code&gt;. These custom bindings&#xA;&lt;a href=&#34;https://azure.github.io/azure-functions-durable-extension/articles/installation.html&#34;&gt;are installed&lt;/a&gt;&#xA;by copying the corresponding assemblies to a special Extensions folder.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Autoscaling with Durable Functions</title>
      <link>https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/</guid>
      <description>&lt;p&gt;In my previous post&#xA;&lt;a href=&#34;https://mikhail.io/2017/07/custom-auto-scaling-in-azure/&#34;&gt;Custom Autoscaling of Azure App Service with a Function App&lt;/a&gt;&#xA;I&amp;rsquo;ve created a Function App which watches a Service Bus Subscription&#xA;backlog and adjusts the scale of App Service based on the observed load.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Autoscaling of Azure App Service with a Function App</title>
      <link>https://mikhail.io/2017/07/custom-auto-scaling-in-azure/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/custom-auto-scaling-in-azure/</guid>
      <description>&lt;p&gt;The power of cloud computing comes from its elasticity and ability to adapt to changing&#xA;load. Most Azure services can be scaled up or down manually: by human interaction in the&#xA;portal, or by running a command or a script.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions as a Facade for Azure Monitoring</title>
      <link>https://mikhail.io/2017/03/azure-functions-as-facade-for-azure-monitoring/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/03/azure-functions-as-facade-for-azure-monitoring/</guid>
      <description>&lt;p&gt;Azure Functions are the Function-as-a-Service offering from Microsoft Azure cloud.&#xA;Basically, an Azure Function is a piece of code which gets executed by Azure&#xA;every time an event of some kind happens. The environment manages deployment,&#xA;event triggers and scaling for you. This approach is often reffered as&#xA;Serverless.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
