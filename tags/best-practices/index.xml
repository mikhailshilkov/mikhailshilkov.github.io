<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Best Practices on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/best-practices/</link>
    <description>Recent content in Best Practices on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Wed, 27 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/best-practices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Peer code review Why&#39;s, How&#39;s and What&#39;s</title>
      <link>https://mikhail.io/2015/05/peer-code-review-whys-hows-and-whats/</link>
      <pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/05/peer-code-review-whys-hows-and-whats/</guid>
      <description>&lt;p&gt;This post is a short summary on why do code reviews, what the steps are and what should actually be reviewed. The text was created to set some common ground for my team, which was just starting to conduct code reviews in a consistent way. By any means, this text is not a complete guide but rather a checklist and a starting point for discussion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing null parameter checks</title>
      <link>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/04/unit-testing-null-parameter-checks/</guid>
      <description>&lt;p&gt;We use constructor dependency injection throughout our application. This means that most service classes have constructors, which accept all dependencies in form of interfaces. They are then saved to private fields to be used while class methods are executed. Here is an example (all examples below are in C#):&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
