<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Generation on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/code-generation/</link>
    <description>Recent content in Code Generation on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Fri, 13 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/code-generation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tweaking immutable objects with C# and Fody</title>
      <link>https://mikhail.io/2016/05/tweaking-immutable-objects-with-csharp-and-fody/</link>
      <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/05/tweaking-immutable-objects-with-csharp-and-fody/</guid>
      <description>&lt;p&gt;Immutable data structures provide a lot of benefits&#xA;to programmers, especially when representing domain&#xA;&lt;a href=&#34;https://lostechies.com/joeocampo/2007/04/23/a-discussion-on-domain-driven-design-value-objects/&#34;&gt;value objects&lt;/a&gt;.&#xA;Immutability is an essential part of functional programming paradigm.&#xA;The concept is useful in object-oriented languages too, but you have&#xA;to pay some price to get this advantage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weaving your domain classes with Fody</title>
      <link>https://mikhail.io/2015/12/weaving-your-domain-classes-with-fody/</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/12/weaving-your-domain-classes-with-fody/</guid>
      <description>&lt;p&gt;When I model the business domain with C#, the resulting data structures tend to contain a lot of boilerplate code. It&amp;rsquo;s repeated from class to class and it gets more difficult to see the essence of the model behind the repetitive cruft. Here is a simplistic example, which illustrates the problem. Let&amp;rsquo;s say we are modelling Trips, and for each &lt;code&gt;Trip&lt;/code&gt; we need to keep track of &lt;code&gt;Origin&lt;/code&gt;, &lt;code&gt;Destination&lt;/code&gt; and &lt;code&gt;Vehicle&lt;/code&gt; which executes the &lt;code&gt;Trip&lt;/code&gt;, nothing else. Here is a code to create an sample trip:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
