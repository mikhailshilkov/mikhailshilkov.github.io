<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/azure/</link>
    <description>Recent content in Azure on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/azure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get Up and Running with Azure Synapse and Pulumi</title>
      <link>https://mikhail.io/2021/12/get-up-and-running-with-azure-synapse-and-pulumi/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2021/12/get-up-and-running-with-azure-synapse-and-pulumi/</guid>
      <description>&lt;p&gt;Azure Synapse is an integrated analytics service that combines enterprise data warehousing of Azure SQL Data Warehouse and Big Data analytics of Apache Spark. Azure Synapse is a managed service well integrated with other Azure services for data ingestion and business analytics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy Temporal to Azure Kubernetes Service (AKS)</title>
      <link>https://mikhail.io/2021/11/how-to-deploy-temporal-to-azure-kubernetes-aks/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2021/11/how-to-deploy-temporal-to-azure-kubernetes-aks/</guid>
      <description>&lt;p&gt;In my article &lt;a href=&#34;https://mikhail.io/2020/10/practical-approach-to-temporal-architecture/&#34;&gt;A Practical Approach to Temporal Architecture&lt;/a&gt;, I outlined the various &lt;a href=&#34;https://temporal.io/&#34;&gt;Temporal&lt;/a&gt; components and how they interact. Today&amp;rsquo;s blog builds on this knowledge and demonstrates an example of deploying Temporal to Kubernetes and, more specifically, to Azure Kubernetes Service (AKS).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploying new Azure Container Apps with familiar languages</title>
      <link>https://mikhail.io/2021/11/azure-container-apps/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2021/11/azure-container-apps/</guid>
      <description>&lt;p&gt;Today, &lt;a href=&#34;https://aka.ms/containerapps/ignite-blog&#34;&gt;Microsoft announced&lt;/a&gt; a new general-purpose serverless container platform: &lt;a href=&#34;https://aka.ms/containerapps/&#34;&gt;Azure Container Apps&lt;/a&gt;. Container Apps is a fully managed platform for microservice applications that runs on top of Kubernetes and open-source technologies like KEDA, Envoy, and Dapr.&lt;/p&gt;&#xA;&lt;p&gt;Container Apps are designed to abstract infrastructure management with flexible serverless containers. Developers can run containers at scale without the burden of standing up and managing a Kubernetes cluster manually.&lt;/p&gt;&#xA;&lt;p&gt;We are happy to announce same-day support for Azure Container Apps in the Pulumi Azure Native Provider, which covers 100% of the Azure Resource Manager APIs and gives you highest fidelity integration with Azure&amp;rsquo;s resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy Temporal to Azure Container Instances</title>
      <link>https://mikhail.io/2021/10/how-to-deploy-temporal-to-azure-container-instances/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2021/10/how-to-deploy-temporal-to-azure-container-instances/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://mikhail.io/2020/10/practical-approach-to-temporal-architecture/&#34;&gt;my previous article&lt;/a&gt;, I outlined the various components of &lt;a href=&#34;https://temporal.io&#34;&gt;Temporal&lt;/a&gt; and how they interact. Today&amp;rsquo;s blog builds on this knowledge and demonstrates an example Temporal deployment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eliminate Cold Starts by Predicting Invocations of Serverless Functions</title>
      <link>https://mikhail.io/2021/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2021/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</guid>
      <description>&lt;p&gt;Developers and decision-makers often mention &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;cold starts&lt;/a&gt; as a significant drawback of serverless functions. Cloud providers continually invest in reducing the latency of a cold start, but they haven&amp;rsquo;t done much to prevent them altogether. The most common technique is to keep a worker alive for 10-20 minutes after each request, hoping that another request comes in and benefits from the warm instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Cold Start Duration per Language</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/languages/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/languages/</guid>
      <description>&lt;p&gt;The following chart shows the typical range of cold starts in Azure Functions, broken down per language. The darker ranges are the most common 67% of durations, and lighter ranges include 95%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cold Starts in Azure Functions</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/</guid>
      <description>&lt;p&gt;This article describes Azure Functions running on Consumption Plan—the dynamically scaled and billed-per-execution compute service. Consumption Plan adds and removes instances dynamically. When a new instance handles its first request, the response time increases, which is called a &lt;strong&gt;cold start&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparison of Cold Starts in Serverless Functions across AWS, Azure, and GCP</title>
      <link>https://mikhail.io/serverless/coldstarts/big3/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/big3/</guid>
      <description>&lt;p&gt;This article compares Function-as-a-Service offerings of Big-3 cloud providers in terms of cold starts. AWS Lambda, Azure Functions (Consumption Plan), and Google Cloud Functions are all dynamically scaled and billed-per-execution compute services. Instances of cloud functions are added and removed dynamically. When a new instance handles its first request, the response time increases, which is called a &lt;strong&gt;cold start&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When Does Cold Start Happen on Azure Functions?</title>
      <link>https://mikhail.io/serverless/coldstarts/azure/intervals/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/serverless/coldstarts/azure/intervals/</guid>
      <description>&lt;p&gt;The first cold start happens when the very first request comes in after deployment.&lt;/p&gt;&#xA;&lt;p&gt;After that request is processed, the instance stays alive for the time being to be reused for subsequent requests. But for how long?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Farmer or Pulumi? Why not both!</title>
      <link>https://mikhail.io/2020/12/farmer-or-pulumi-why-not-both/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/12/farmer-or-pulumi-why-not-both/</guid>
      <description>&lt;p&gt;&lt;em&gt;The post is a part of&#xA;&lt;a href=&#34;https://sergeytihon.com/2020/10/22/f-advent-calendar-in-english-2020/&#34;&gt;F# Advent Calendar 2020&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;You are a proud F# developer. You deploy your applications to Microsoft Azure. You know that you should never right-click-deploy to production. You don&amp;rsquo;t create important Azure resources via the Azure portal. You are awesome.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Get Up and Running with Azure Synapse and Pulumi</title>
      <link>https://mikhail.io/2020/12/get-up-and-running-with-azure-synapse-and-pulumi/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/12/get-up-and-running-with-azure-synapse-and-pulumi/</guid>
      <description>&lt;p&gt;Azure Synapse is an integrated analytics service that combines enterprise data warehousing of Azure SQL Data Warehouse and Big Data analytics of Apache Spark. Azure Synapse is a managed service well integrated with other Azure services for data ingestion and business analytics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy Temporal to Azure Kubernetes Service (AKS)</title>
      <link>https://mikhail.io/2020/11/how-to-deploy-temporal-to-azure-kubernetes-aks/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/11/how-to-deploy-temporal-to-azure-kubernetes-aks/</guid>
      <description>&lt;p&gt;In my article &lt;a href=&#34;https://mikhail.io/2020/10/practical-approach-to-temporal-architecture/&#34;&gt;A Practical Approach to Temporal Architecture&lt;/a&gt;, I outlined the various &lt;a href=&#34;https://temporal.io/&#34;&gt;Temporal&lt;/a&gt; components and how they interact. Today’s blog builds on this knowledge and demonstrates an example of deploying Temporal to Kubernetes and, more specifically, to Azure Kubernetes Service (AKS).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy Temporal to Azure Container Instances</title>
      <link>https://mikhail.io/2020/10/how-to-deploy-temporal-to-azure-container-instances/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/10/how-to-deploy-temporal-to-azure-container-instances/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://mikhail.io/2020/10/practical-approach-to-temporal-architecture/&#34;&gt;my previous article&lt;/a&gt;, I outlined the various components of &lt;a href=&#34;https://temporal.io&#34;&gt;Temporal&lt;/a&gt; and how they interact. Today&amp;rsquo;s blog builds on this knowledge and demonstrates an example Temporal deployment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Announcing Next Generation Pulumi Azure Provider</title>
      <link>https://mikhail.io/2020/09/announcing-nextgen-azure-provider/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/09/announcing-nextgen-azure-provider/</guid>
      <description>&lt;p&gt;I am excited to announce the beta release of a next generation Microsoft Azure provider for Pulumi. Azure has been a rapidly growing cloud platform among Pulumi users over the last year, and with the next generation Azure provider, we are doubling down on providing the best support possible for the Azure platform in Pulumi. We designed the new provider to expose the entire API surface of Azure to developers and operators, now and forever.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eliminate Cold Starts by Predicting Invocations of Serverless Functions</title>
      <link>https://mikhail.io/2020/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/06/eliminate-cold-starts-by-predicting-invocations-of-serverless-functions/</guid>
      <description>&lt;p&gt;Developers and decision-makers often mention &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;cold starts&lt;/a&gt; as a significant drawback of serverless functions. Cloud providers continually invest in reducing the latency of a cold start, but they haven&amp;rsquo;t done much to prevent them altogether. The most common technique is to keep a worker alive for 10-20 minutes after each request, hoping that another request comes in and benefits from the warm instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless in the Wild: Azure Functions Production Usage Statistics</title>
      <link>https://mikhail.io/2020/05/serverless-in-the-wild-azure-functions-usage-stats/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/05/serverless-in-the-wild-azure-functions-usage-stats/</guid>
      <description>&lt;p&gt;Microsoft Azure and Microsoft Research &lt;a href=&#34;https://arxiv.org/pdf/2003.03423.pdf&#34;&gt;released&lt;/a&gt; a paper called &amp;ldquo;Serverless in the Wild: Characterizing and Optimizing the Serverless Workload at a Large Cloud Provider&amp;rdquo;. In part 1 of the paper, they revealed some insightful statistics about the actual production usage of Azure Functions for two weeks in summer 2019.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hosting Azure Functions in Google Cloud Run</title>
      <link>https://mikhail.io/2020/02/azure-functions-in-google-cloud-run/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2020/02/azure-functions-in-google-cloud-run/</guid>
      <description>&lt;p&gt;Suppose you are a .NET developer, you love the Function-as-a-Service (FaaS) model, but you want to run your serverless functions in Google Cloud. You want to keep using C# or F#, and still leverage all serverless benefits—ease of use, scalability, elasticity, pay-per-value cost model—running in GCP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Santa Brings Cloud to Every Developer</title>
      <link>https://mikhail.io/2019/12/santa-brings-cloud-to-every-developer/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/12/santa-brings-cloud-to-every-developer/</guid>
      <description>&lt;p&gt;&lt;em&gt;The post is a part of&#xA;&lt;a href=&#34;https://sergeytihon.com/2019/11/05/f-advent-calendar-in-english-2019/&#34;&gt;F# Advent Calendar 2019&lt;/a&gt;.&#xA;It&amp;rsquo;s Christmas time!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Cloud is everywhere, and yet it&amp;rsquo;s still inaccessible to millions of developers and IT pros. With shining yet cloudy eyes return they from KubeCon&amp;rsquo;s and re:Invent&amp;rsquo;s, just to pick up an issue in Jira, fix yet another &lt;code&gt;SingletonProxyFactoryBean&lt;/code&gt; in their J2EE application, commit it to SVN, and hope it will be delivered in three months to the data center in their HQ basement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Choosing the Best Deployment Tool for Your Serverless Applications</title>
      <link>https://mikhail.io/2019/11/choosing-the-best-deployment-tool-for-serverless-applications/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/11/choosing-the-best-deployment-tool-for-serverless-applications/</guid>
      <description>&lt;p&gt;Function-as-a-Service solutions, such as AWS Lambda and Azure Functions, are a great way to build modern, scalable, and affordable cloud-native applications. By delegating routine work to cloud providers, serverless applications focus on custom logic to provide the ultimate business value. But, in fact, serverless is more than cloud functions. It&amp;rsquo;s storage, HTTP gateways, databases, queues, monitoring, and security&amp;mdash;and your serverless applications are likely to use multiple managed services and consist of many moving parts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Lambda vs. Azure Functions: 10 Major Differences</title>
      <link>https://mikhail.io/2019/10/aws-lambda-vs-azure-functions-ten-major-differences/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/10/aws-lambda-vs-azure-functions-ten-major-differences/</guid>
      <description>&lt;p&gt;Forget about managing virtual machines or paying for idle hardware! Serverless compute brings unlimited scale and high availability to every company in the world, from small startups to multinational corporations. At least, that’s the vision of Amazon and Microsoft, today’s biggest cloud vendors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Deploy a Function App with KEDA (Kubernetes-based Event-Driven Autoscaling)</title>
      <link>https://mikhail.io/2019/10/how-to-deploy-a-function-app-with-keda/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/10/how-to-deploy-a-function-app-with-keda/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Azure Functions&lt;/strong&gt; is a managed service for serverless applications in the Azure cloud. More broadly, Azure Functions is a runtime with multiple hosting possibilities. &lt;strong&gt;KEDA&lt;/strong&gt; (&lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/05/06/announcing-keda-kubernetes-event-driven-autoscaling-containers/&#34;&gt;Kubernetes-based Event-Driven Autoscaling&lt;/a&gt;) is an emerging option to host this runtime in &lt;strong&gt;Kubernetes&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Build Globally Distributed Applications with Azure Cosmos DB and Pulumi</title>
      <link>https://mikhail.io/2019/09/how-to-build-globally-distributed-applications-with-azure-cosmos-db-and-pulumi/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/09/how-to-build-globally-distributed-applications-with-azure-cosmos-db-and-pulumi/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/&#34;&gt;previous blog post&lt;/a&gt;, I shared how easy it is to create a globally distributed, highly-available, low-latency application with Azure Functions, Azure Cosmos DB, and Pulumi.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ten Pearls With Azure Functions in Pulumi</title>
      <link>https://mikhail.io/2019/08/ten-pearls-with-azure-functions-in-pulumi/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/08/ten-pearls-with-azure-functions-in-pulumi/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll take a look at 10 &amp;ldquo;pearls&amp;rdquo;—bite-sized code snippets—that demonstrate using Pulumi to build serverless applications with Azure Functions and infrastructure as code. These pearls are organized into four categories, each demonstrating a unique scenario:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Function App Deployment&lt;/strong&gt;: Deploy an existing Azure Functions application using infrastructure as code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP Functions as Callbacks&lt;/strong&gt;: Mix JavaScript or TypeScript functions with your infrastructure definition to produce strongly-typed, self-contained, serverless HTTP endpoints.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cloud Event Handling&lt;/strong&gt;: Leverage a variety of event sources available to Azure Functions with lightweight event handlers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Flows with Function Bindings&lt;/strong&gt;: Take advantage of function bindings—declarative connectors to Azure services.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>How to Measure the Cost of Azure Functions</title>
      <link>https://mikhail.io/2019/08/how-to-measure-the-cost-of-azure-functions/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/08/how-to-measure-the-cost-of-azure-functions/</guid>
      <description>&lt;p&gt;Azure Functions can be hosted in multiple ways: there&amp;rsquo;s an App Service plan with a fixed cost per hour, a new Premium plan with both fixed and variable price components, not to mention self-managed options based on container technologies. Instead of any of those three, this article focuses on Consumption plan—the classic serverless offering billed purely based on the actual usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>7 Ways to Deal with Application Secrets in Azure</title>
      <link>https://mikhail.io/2019/07/7-ways-to-deal-with-application-secrets-in-azure/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/7-ways-to-deal-with-application-secrets-in-azure/</guid>
      <description>&lt;p&gt;Every non-trivial application relies on configuration values that may depend on the current execution environment. Some of these values contain sensitive information that shouldn&amp;rsquo;t be shared publicly. In general, the fewer parties that have access to those secret values, the safer the application will be—in fact, in an ideal world, no one would be granted direct access to those secrets.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Load-Testing Azure Functions with Loader.io</title>
      <link>https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/</guid>
      <description>&lt;p&gt;When Azure Functions team presented the new &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-premium-plan&#34;&gt;Premium plan&lt;/a&gt;, they made a series of demos which compared the response time of a Function App running on the Consumption plan vs. an App running on the Premium plan. Both apps would receive a rapid growth of incoming requests, and then the percentiles of response latencies were compared.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Azure CLI Manages Your Access Tokens</title>
      <link>https://mikhail.io/2019/07/how-azure-cli-manages-access-tokens/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/how-azure-cli-manages-access-tokens/</guid>
      <description>&lt;p&gt;Azure has several tools available to create and manage cloud resources. The Azure command-line interface (CLI) is probably the second most-used tool after the web portal. The CLI runs on any platform and covers a wide variety of actions. Here is a command to create a new Virtual Machine:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Globally-distributed Serverless Application in 100 Lines of Code. Infrastructure Included!</title>
      <link>https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/07/globally-distributed-serverless-application-in-100-lines-of-code/</guid>
      <description>&lt;p&gt;Pulumi is excellent at connecting multiple cloud components into a cohesive application. In my &lt;a href=&#34;https://blog.pulumi.com/serverless-as-simple-callbacks-with-pulumi-and-azure-functions&#34;&gt;previous post&lt;/a&gt;, I introduced the way to mix JavaScript or TypeScript serverless functions directly into the cloud infrastructure programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hosting a Static Website on Azure with Pulumi</title>
      <link>https://mikhail.io/2019/06/hosting-a-static-website-on-azure-with-pulumi/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/06/hosting-a-static-website-on-azure-with-pulumi/</guid>
      <description>&lt;p&gt;Static websites are back in the mainstream these days. Website generators like Jekyll, Hugo, or Gatsby, make it fairly easy to combine templates and markdown pages to produce static HTML files. Static assets are the simplest thing to serve and cache, so the whole setup ends up being fast and cost-efficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless as Simple Callbacks with Pulumi and Azure Functions</title>
      <link>https://mikhail.io/2019/05/serverless-as-simple-callbacks-with-pulumi-and-azure-functions/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/05/serverless-as-simple-callbacks-with-pulumi-and-azure-functions/</guid>
      <description>&lt;p&gt;Serverless compute services, like Azure Functions, offer an amazing power to application developers to leverage: highly available, automatically scaled, low-ceremony, pay-per-value functions created in several lines of code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Level up your Azure Platform as a Service applications with Pulumi</title>
      <link>https://mikhail.io/2019/05/level-up-your-azure-platform-as-a-service-applications-with-pulumi/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/05/level-up-your-azure-platform-as-a-service-applications-with-pulumi/</guid>
      <description>&lt;p&gt;Pulumi enables developers to define cloud infrastructure using general purpose programming languages. Pulumi works with multiple cloud providers and has first-class support for all services in Microsoft Azure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reducing Cold Start Duration in Azure Functions</title>
      <link>https://mikhail.io/2019/03/reducing-azure-functions-cold-start-time/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/reducing-azure-functions-cold-start-time/</guid>
      <description>&lt;p&gt;Back in February, I published the first version of &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/azure/&#34;&gt;Cold Starts in Azure Functions&lt;/a&gt;—the detailed analysis of cold start durations in serverless Azure. The article showed the following numbers for C# and JavaScript functions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency and Isolation in Serverless Functions</title>
      <link>https://mikhail.io/2019/03/concurrency-and-isolation-in-serverless-functions/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/concurrency-and-isolation-in-serverless-functions/</guid>
      <description>&lt;p&gt;Serverless vendors have different approaches when it comes to sharing or isolating resources between multiple executions of the same cloud function. In this article, I&amp;rsquo;ll explore the execution concurrency models of three FaaS offerings and the associated trade-offs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualizing Cold Starts</title>
      <link>https://mikhail.io/2019/03/visualizing-cold-starts/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/03/visualizing-cold-starts/</guid>
      <description>&lt;p&gt;I &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;wrote a lot&lt;/a&gt; about cold starts of serverless functions. The articles are full of charts and numbers which are hopefully useful but might be hard to internalize. I decided to come up with a way to represent colds starts visually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless at Scale: Serving StackOverflow-like Traffic</title>
      <link>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2019/serverless-at-scale-serving-stackoverflow-like-traffic/</guid>
      <description>&lt;p&gt;Serverless compute is a very productive and quick way to get an application up and running. A developer writes a piece of code that solves a particular task and uploads it to the cloud. The provider handles code deployment and the ops burden of managing all the required infrastructure, so that the Function is always available, secure and performant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Fairy Tale of F# and Durable Functions</title>
      <link>https://mikhail.io/2018/12/fairy-tale-of-fsharp-and-durable-functions/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/12/fairy-tale-of-fsharp-and-durable-functions/</guid>
      <description>&lt;p&gt;&lt;em&gt;The post is a part of&#xA;&lt;a href=&#34;https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/&#34;&gt;F# Advent Calendar 2018&lt;/a&gt;.&#xA;It&amp;rsquo;s Christmas time!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This summer I was hired by the office of Santa Claus. Santa is not just a fairy tale&#xA;character on his own—he leads a large organization that supplies gifts and happiness to millions of&#xA;children around the globe. Like any large organization, Santa&amp;rsquo;s office employs an impressive number of&#xA;IT systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Sense of Azure Durable Functions</title>
      <link>https://mikhail.io/2018/12/making-sense-of-azure-durable-functions/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/12/making-sense-of-azure-durable-functions/</guid>
      <description>&lt;p&gt;Stateful Workflows on top of Stateless Serverless Cloud Functions—this is the essence&#xA;of the Azure Durable Functions library. That&amp;rsquo;s a lot of fancy words in one sentence, and they&#xA;might be hard for the majority of readers to understand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From 0 to 1000 Instances: How Serverless Providers Scale Queue Processing</title>
      <link>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/11/from-0-to-1000-instances-how-serverless-providers-scale-queue-processing/</guid>
      <description>&lt;p&gt;Whenever I see a &amp;ldquo;Getting Started with Function-as-a-Service&amp;rdquo; tutorial, it usually shows off&#xA;a synchronous HTTP-triggered scenario. In my projects, though, I use a lot of asynchronous&#xA;functions triggered by a queue or an event stream.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions V2 Is Released, How Performant Is It?</title>
      <link>https://mikhail.io/2018/10/azure-functions-v2-released-how-performant-is-it/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/10/azure-functions-v2-released-how-performant-is-it/</guid>
      <description>&lt;p&gt;Azure Functions major version 2.0 was released into GA a few days back during Microsoft Ignite. The runtime is now&#xA;based on .NET Core and thus is cross-platform and more interoperable. It has a nice extensibility story too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless: Cold Start War</title>
      <link>https://mikhail.io/2018/08/serverless-cold-start-war/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/08/serverless-cold-start-war/</guid>
      <description>&lt;p&gt;&lt;em&gt;The newer and much more detailed cold start comparison is now available: &lt;a href=&#34;https://mikhail.io/serverless/coldstarts/&#34;&gt;Cold Starts in Serverless Functions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Serverless cloud services are hot. Except when they are not :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programmable Cloud: Provisioning Azure App Service with Pulumi</title>
      <link>https://mikhail.io/2018/06/programmable-cloud-provisioning-azure-app-service-with-pulumi/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/06/programmable-cloud-provisioning-azure-app-service-with-pulumi/</guid>
      <description>&lt;p&gt;Modern Cloud providers offer a wide variety of services of different types&#xA;and levels. A modern cloud application would leverage multiple services&#xA;in order to be efficient in terms of developer experience, price, operations&#xA;etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cold Starts Beyond First Request in Azure Functions</title>
      <link>https://mikhail.io/2018/05/azure-functions-cold-starts-beyond-first-load/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/05/azure-functions-cold-starts-beyond-first-load/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/&#34;&gt;previous article&lt;/a&gt;&#xA;I&amp;rsquo;ve explored the topic of Cold Starts in Azure Functions. Particularly, I&amp;rsquo;ve measured the&#xA;cold start delays per language and runtime version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Cold Starts in Numbers</title>
      <link>https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/04/azure-functions-cold-starts-in-numbers/</guid>
      <description>&lt;p&gt;Auto-provisioning and auto-scalability are the killer features of Function-as-a-Service&#xA;cloud offerings, and Azure Functions in particular.&lt;/p&gt;&#xA;&lt;p&gt;One drawback of such dynamic provisioning is a phenomenon called &amp;ldquo;Cold Start&amp;rdquo;. Basically,&#xA;applications that haven&amp;rsquo;t been used for a while take longer to startup and to handle the&#xA;first request.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Durable Functions in F#</title>
      <link>https://mikhail.io/2018/02/azure-durable-functions-in-fsharp/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/02/azure-durable-functions-in-fsharp/</guid>
      <description>&lt;p&gt;Azure Functions are designed for stateless, fast-to-execute,&#xA;simple actions. Typically, they are triggered by an HTTP call or a queue message,&#xA;then they read something from the storage or database and return the result&#xA;to the caller or send it to another queue. All within several seconds at most.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Load Testing Azure SQL Database by Copying Traffic from Production SQL Server</title>
      <link>https://mikhail.io/2018/02/load-testing-azure-sql-database-by-copying-traffic-from-production-sql-server/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2018/02/load-testing-azure-sql-database-by-copying-traffic-from-production-sql-server/</guid>
      <description>&lt;p&gt;Azure SQL Database is a managed service that provides low-maintenance SQL Server instances in the cloud.&#xA;You don&amp;rsquo;t have to run and update VMs, or even take backups and setup failover clusters.&#xA;Microsoft will do administration for you, you just pay an hourly fee.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions Get More Scalable and Elastic</title>
      <link>https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/</guid>
      <description>&lt;p&gt;Back in August this year, I&amp;rsquo;ve posted&#xA;&lt;a href=&#34;https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/&#34;&gt;Azure Functions: Are They Really Infinitely Scalable and Elastic?&lt;/a&gt;&#xA;with two experiments about Azure Function App auto scaling. I ran a simple&#xA;CPU-bound function based on Bcrypt hashing, and measured how well Azure&#xA;was running my Function under load.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Precompiled Azure Functions in F#</title>
      <link>https://mikhail.io/2017/12/precompiled-azure-functions-in-fsharp/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/12/precompiled-azure-functions-in-fsharp/</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is giving a start to&#xA;&lt;a href=&#34;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&#34;&gt;F# Advent Calendar in English 2017&lt;/a&gt;.&#xA;Please follow the calendar for all the great posts to come.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Azure Functions is a &amp;ldquo;serverless&amp;rdquo; cloud offering from Microsoft. It&#xA;allows you to run your custom code as response to events in the cloud.&#xA;Functions are very easy to&#xA;start with; and you only pay per execution - with free allowance sufficient&#xA;for any proof-of-concept, hobby project or even low-usage production loads.&#xA;And when you need more, Azure will scale your project up automatically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Function Triggered by Azure Event Grid</title>
      <link>https://mikhail.io/2017/10/azure-function-triggered-by-azure-event-grid/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/10/azure-function-triggered-by-azure-event-grid/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update: I missed the elephant in the room. There actually exists a specialized&#xA;trigger for Event Grid binding. In the portal, just select &lt;code&gt;Experimental&lt;/code&gt;&#xA;in &lt;code&gt;Scenario&lt;/code&gt; drop down while creating the function. In precompiled&#xA;functions, reference &lt;code&gt;Microsoft.Azure.WebJobs.Extensions.EventGrid&lt;/code&gt; NuGet&#xA;package.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wanted: Effectively-Once Processing in Azure</title>
      <link>https://mikhail.io/2017/09/wanted-effectively-once-processing-in-azure/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/09/wanted-effectively-once-processing-in-azure/</guid>
      <description>&lt;p&gt;&lt;em&gt;This experimental post is a question. The question is too broad for StackOverflow, so I&amp;rsquo;m posting it here. Please engage in the comments section, or forward the link to subject experts.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions: Are They Really Infinitely Scalable and Elastic?</title>
      <link>https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/08/azure-functions-are-they-really-infinitely-scalable-and-elastic/</guid>
      <description>&lt;p&gt;&lt;em&gt;Updated results are available at&#xA;&lt;a href=&#34;https://mikhail.io/2017/12/azure-functions-get-more-scalable-and-elastic/&#34;&gt;Azure Functions Get More Scalable and Elastic&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Automatic elastic scaling is a built-in feature of Serverless computing&#xA;paradigm. One doesn&amp;rsquo;t have to provision servers anymore, they just need to&#xA;write code that will be provisioned on as many servers as needed based on the&#xA;actual load. That&amp;rsquo;s the theory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Authoring a Custom Binding for Azure Functions</title>
      <link>https://mikhail.io/2017/07/authoring-custom-binding-azure-functions/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/authoring-custom-binding-azure-functions/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/&#34;&gt;previous post&lt;/a&gt;&#xA;I described how I used Durable Functions extensions&#xA;in Azure Function App. Durable Functions are using several binding types&#xA;that are not part of the standard suite: &lt;code&gt;OrchestrationClient&lt;/code&gt;,&#xA;&lt;code&gt;OrchestrationTrigger&lt;/code&gt;, &lt;code&gt;ActivityTrigger&lt;/code&gt;. These custom bindings&#xA;&lt;a href=&#34;https://azure.github.io/azure-functions-durable-extension/articles/installation.html&#34;&gt;are installed&lt;/a&gt;&#xA;by copying the corresponding assemblies to a special Extensions folder.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Autoscaling with Durable Functions</title>
      <link>https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/custom-autoscaling-with-durable-functions/</guid>
      <description>&lt;p&gt;In my previous post&#xA;&lt;a href=&#34;https://mikhail.io/2017/07/custom-auto-scaling-in-azure/&#34;&gt;Custom Autoscaling of Azure App Service with a Function App&lt;/a&gt;&#xA;I&amp;rsquo;ve created a Function App which watches a Service Bus Subscription&#xA;backlog and adjusts the scale of App Service based on the observed load.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Autoscaling of Azure App Service with a Function App</title>
      <link>https://mikhail.io/2017/07/custom-auto-scaling-in-azure/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/custom-auto-scaling-in-azure/</guid>
      <description>&lt;p&gt;The power of cloud computing comes from its elasticity and ability to adapt to changing&#xA;load. Most Azure services can be scaled up or down manually: by human interaction in the&#xA;portal, or by running a command or a script.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sending Large Batches to Azure Service Bus</title>
      <link>https://mikhail.io/2017/07/sending-large-batches-to-azure-service-bus/</link>
      <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/07/sending-large-batches-to-azure-service-bus/</guid>
      <description>&lt;p&gt;Azure Service Bus client supports sending messages in batches (&lt;code&gt;SendBatch&lt;/code&gt;&#xA;and &lt;code&gt;SendBatchAsync&lt;/code&gt; methods of &lt;code&gt;QueueClient&lt;/code&gt; and &lt;code&gt;TopicClient&lt;/code&gt;). However,&#xA;the size of a single batch must stay below 256k bytes, otherwise the whole&#xA;batch will get rejected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding Lost Events in Azure Application Insights</title>
      <link>https://mikhail.io/2017/06/finding-lost-events-in-azure-application-insights/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/06/finding-lost-events-in-azure-application-insights/</guid>
      <description>&lt;p&gt;One of the ways we use Azure Application Insights is tracking custom&#xA;application-specific events. For instance, every time a data point from an&#xA;IoT device comes in, we log an AppInsights event. Then we are able to&#xA;aggregate the data and plot charts to derive trends and detect possible&#xA;anomalies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reliable Consumer of Azure Event Hubs</title>
      <link>https://mikhail.io/2017/05/reliable-consumer-of-azure-event-hubs/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/05/reliable-consumer-of-azure-event-hubs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/event-hubs/&#34;&gt;Azure Event Hubs&lt;/a&gt; is&#xA;a log-based messaging system-as-a-service in Azure cloud. It&amp;rsquo;s designed to be able to handle huge&#xA;amount of data, and naturally supports multiple consumers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Functions as a Facade for Azure Monitoring</title>
      <link>https://mikhail.io/2017/03/azure-functions-as-facade-for-azure-monitoring/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/03/azure-functions-as-facade-for-azure-monitoring/</guid>
      <description>&lt;p&gt;Azure Functions are the Function-as-a-Service offering from Microsoft Azure cloud.&#xA;Basically, an Azure Function is a piece of code which gets executed by Azure&#xA;every time an event of some kind happens. The environment manages deployment,&#xA;event triggers and scaling for you. This approach is often reffered as&#xA;Serverless.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Service Bus Entity Metrics .NET APIs</title>
      <link>https://mikhail.io/2017/03/azure-service-bus-entity-metrics-dotnet-apis/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2017/03/azure-service-bus-entity-metrics-dotnet-apis/</guid>
      <description>&lt;p&gt;Azure Service Bus is a key component of many background processing applications hosted in Azure, so it definitely requires monitoring and alerting. My goal for our monitoring solution was to provide an API to retrieve the following parameters for each Service Bus queue/topic in our application:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure SQL Databases: Backups, Disaster Recovery, Import and Export</title>
      <link>https://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/</link>
      <pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/10/azure-sql-databases-backups-disaster-recovery-import-export/</guid>
      <description>&lt;p&gt;Azure SQL Database is a managed cloud database-as-a-service. It provides&#xA;application developers with SQL Server databases which are hosted in the&#xA;cloud and fully managed by Microsoft.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started with Azure Application Insights in Aurelia</title>
      <link>https://mikhail.io/2016/08/getting-started-with-azure-application-insights-in-aurelia/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/08/getting-started-with-azure-application-insights-in-aurelia/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/app-insights-overview/&#34;&gt;Azure Application Insights&lt;/a&gt;&#xA;is an analytics service to monitor live web applications,&#xA;diagnose performance issues, and understand what users actually do with the app.&#xA;&lt;a href=&#34;http://aurelia.io&#34;&gt;Aurelia&lt;/a&gt; is a modern and slick single-page application framework.&#xA;Unfortunately, there&amp;rsquo;s not much guidance on the web about how to use AppInsights and&#xA;Aurelia together in a proper manner. The task gets even more challenging in case you are&#xA;using TypeScript and want to stay in type-safe land. This post will set you up and&#xA;running in no time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fire-and-forget in Service Fabric actors</title>
      <link>https://mikhail.io/2016/01/fire-and-forget-in-service-fabric-actors/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/01/fire-and-forget-in-service-fabric-actors/</guid>
      <description>&lt;p&gt;At the &lt;a href=&#34;http://www.meetup.com/Webscale-Architecture-NL/events/225979118/&#34;&gt;recent Webscale Architecture meetup&lt;/a&gt;&#xA;we discussed two implementations of the Actor model in the .NET ecosystem:&#xA;&lt;a href=&#34;http://akka.net&#34;&gt;Akka.NET&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/service-fabric-reliable-actors-introduction/&#34;&gt;Azure Service Fabric Actors&lt;/a&gt;.&#xA;One important discussion was&#xA;around &lt;strong&gt;Ask&lt;/strong&gt; vs &lt;strong&gt;Tell&lt;/strong&gt; call model. With &lt;strong&gt;Tell&lt;/strong&gt; model, the Sender just sends the&#xA;message to the Recepient without waiting for a result to come back. &lt;strong&gt;Ask&lt;/strong&gt; model&#xA;means the Sender will at some point get a response back from the Receiver, potencially&#xA;blocking its own execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy your SPA to Azure</title>
      <link>https://mikhail.io/2015/12/deploy-your-spa-to-azure/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2015/12/deploy-your-spa-to-azure/</guid>
      <description>&lt;p&gt;In this post I want to share a simple tutorial on how to deploy your single page application into the Azure cloud.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-goal&#34;&gt;The goal&lt;/h2&gt;&#xA;&lt;p&gt;Here is the initial setup:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
