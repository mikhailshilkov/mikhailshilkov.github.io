<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOLID on Mikhail Shilkov</title>
    <link>https://mikhail.io/tags/solid/</link>
    <description>Recent content in SOLID on Mikhail Shilkov</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mikhail Shilkov - All rights reserved</copyright>
    <lastBuildDate>Fri, 27 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mikhail.io/tags/solid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dependency Inversion Implies Interfaces Are Owned by High-level Modules</title>
      <link>https://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      <guid>https://mikhail.io/2016/05/dependency-inversion-implies-interfaces-are-owned-by-high-level-modules/</guid>
      <description>&lt;p&gt;Dependency Inversion is one of the five principles of widely known and&#xA;acknowledged S.O.L.I.D. design guidelines. This principle is very powerful&#xA;and useful when applied consistently. But in my experience, it&amp;rsquo;s actually&#xA;quite easy to misunderstand the idea, or at least to mentally simplify it&#xA;to somewhat less profound technique of Dependency Injection.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
